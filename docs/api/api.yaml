openapi: 3.0.0
info:
  title: Hekate Server
  description: API specification for Hekate Server
  version: '1.0'
  license:
    name: 'Apache 2.0'
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  '/api/v1/project/{projectName}/.well-known/openid-configuration':
    get:
      summary: "OpenID Connect Discovery Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIDConfiguration'
  '/api/v1/project/{projectName}/openid-connect/token':
    post:
      summary: "Token Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'  
      responses:
        '200':
          description: 'Get Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: 'invalid_request_object, invalid_request_uri, invalid_grant, unsupported_grant_type'
        '403':
          description: 'invalid_client, request_unauthorized'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/openid-connect/certs':
    get:
      summary: "JSON Web Keys Discovery"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Get Certificate"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/openid-connect/auth':
    get:
      summary: "Authorization Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: true
          schema:
            type: string
        - name: response_type
          in: query
          required: true
          schema:
            type: string
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        '200':
          description: "Success"
        '400':
          description: "invalid_request_uri"
        '403':
          description: "invalid_client"
        '302':
          description: "return error to callback url"
        '500':
          description: "Internal server error"
    post:
      summary: "Authorization Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthRequest'  
      responses:
        '200':
          description: "Success"
        '400':
          description: "invalid_request_uri, invalid_request_object"
        '403':
          description: "invalid_client"
        '302':
          description: "return error to callback url"
        '500':
          description: "Internal server error"
  '/api/v1/project/{projectName}/openid-connect/userinfo':
    get:
      summary: "UserInfo Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Get UserInfo"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: "invalid_request"
        '500':
          description: "Internal server error"
    post:
      summary: "UserInfo Endpoint"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Get UserInfo"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: "invalid_request"
        '500':
          description: "Internal server error"
  '/api/v1/project/{projectName}/openid-connect/login':
    post:
      summary: "Login to hekate"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "Return error page or consent page"
        '302':
          description: "Redirect to callback URL"
        '500':
          description: "Internal server error"
  '/api/v1/project/{projectName}/openid-connect/consent':
    post:
      summary: "Consent to auth"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConsentRequest'
      responses:
        '200':
          description: "Return error page"
        '302':
          description: "Return error or success to callback URL"
  '/api/v1/project/{projectName}/openid-connect/revoke':
    post:
      summary: "Revoke Token"
      tags:
        - openid-connect
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRevokeRequest' 
      responses:
        '200':
          description: "ok"
        '400':
          description: "unsupported token type"
        '500':
          description: "Internal server error"
  '/api/v1/project':
    post:
      summary: "Create Project"
      description: |
        create new project  
        require role is write-cluster
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '200':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: 'Bad Request'
        '403':
          description: 'Forbidden'
        '409':
          description: 'Project Already Exists'
        '500':
          description: 'Internal Server Error'
    get:
      summary: "Get List of Projects"
      description: |
        get a list of projects
        require role is read-cluster
      tags:
        - project
      responses:
        '200':
          description: 'Get projects'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectGetResponse'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}':
    get:
      summary: "Get Project"
      description: |
        get a project
        require role is read-project
      tags:
        - project
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get project info'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '404':
          description: 'Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "Update Project"
      description: |
        update the project
        require role is write-project
      tags:
        - project
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPutRequest'
      responses:
        '204':
          description: 'Updated'
        '400':
          description: 'Bad Request'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete Project"
      description: |
        delete the project
        require role is write-cluster
      tags:
        - project
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/update-secret':
    post:
      summary: "Update secret info"
      description: |
        update secret info of the project
        require role is write-cluster
      tags:
        - project
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'successfully updated'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/user':
    post:
      summary: "Create User"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Project Not Found'
        '409':
          description: 'User Already Exists'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    get:
      summary: "Get List of Users"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 'Get All Users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGetResponse'
        '403':
          description: 'Forbidden'
        '404':
          description: 'Project Not Found'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/user/{userID}':
    get:
      summary: "Get User"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get user info'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        '403':
          description: 'Forbidden'
        '404':
          description: 'User or Project Not Found'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "Update User"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPutRequest'
      responses:
        '204':
          description: 'Updated'
        '400':
          description: 'Bad Request'
        '404':
          description: 'User or Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete User"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '404':
          description: 'User or Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/user/{userID}/role/{roleID}':
    post:
      summary: "Add Role to User"
      tags:
        - user
      description: 'Add a role to the user'
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
        - name: roleID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Added'
        '400':
          description: 'Bad Request'
        '404':
          description: 'User or Project Not Found'
        '409':
          description: 'Role Already Appended'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete Role from User"
      tags:
        - user
      description: 'Delete a role from the user'
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
        - name: roleID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '400':
          description: 'Bad Request'
        '404':
          description: 'User or Project or Role Not Found or No Such Role in User'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/user/{userID}/change-password':
    post:
      summary: "Change User Password"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
      responses:
        '200':
          description: 'Success'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Project or User Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/user/{userID}/logout':
    post:
      summary: "Logout User"
      tags:
        - user
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Success'
        '404':
          description: 'User Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/client':
    post:
      summary: "Create Client"
      tags:
        - client
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateRequest'
      responses:
        '200':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientGetResponse'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Project Not Found'
        '409':
          description: 'Client Already Exists'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    get:
      summary: "Get List of Clients"
      tags:
        - client
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get All Clients'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/client/{clientID}':
    get:
      summary: "Get Client"
      tags:
        - client
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: clientID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get client info'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ClientGetResponse'
        '404':
          description: 'Client Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "Update Client"
      tags:
        - client
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: clientID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPutRequest'
      responses:
        '204':
          description: 'Updated'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Client Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete Client"
      tags:
        - client
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: clientID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '404':
          description: 'Client or Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/role':
    post:
      summary: "Create Role"
      tags:
        - role
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRoleCreateRequest'
      responses:
        '200':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoleGetResponse'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Project Not Found'
        '409':
          description: 'Role Already Exists'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    get:
      summary: "Get List of Roles"
      tags:
        - role
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 'Get All Custom Roles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomRoleGetResponse'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/role/{roleID}':
    get:
      summary: "Get Role"
      tags:
        - role
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: roleID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get custom role info'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoleGetResponse'
        '404':
          description: 'Role Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "Update Role"
      tags:
        - role
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: roleID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRolePutRequest'
      responses:
        '204':
          description: 'Updated'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Role Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete Role"
      tags:
        - role
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: roleID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '404':
          description: 'Role Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/session/{sessionID}':
    get:
      summary: "Get Session"
      tags:
        - session
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: sessionID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get session'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SessionGetResponse'
        '404':
          description: 'Session or Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "Delete Session"
      tags:
        - session
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: sessionID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Deleted'
        '404':
          description: 'Session or Project Not Found'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
  '/api/v1/project/{projectName}/audit':
    get:
      summary: "Get Audit events"
      tags:
        - audit-event
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: from_date
          in: query
          schema:
            type: string
        - name: to_date
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully get audit event list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditGetResponse'
        '403':
          description: 'Forbidden'
        '500':
          description: 'Internal Server Error'
components:
  schemas:
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
        tokenConfig:
          $ref: '#/components/schemas/TokenConfig'
        passwordPolicy:
          $ref: '#/components/schemas/PasswordPolicy' 
        allowGrantTypes:
          type: array
          items:
            type: string
        userLock:
          $ref: '#/components/schemas/UserLock'
    ProjectGetResponse:
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
          format: date
        tokenConfig:
          $ref: '#/components/schemas/TokenConfig'
        passwordPolicy:
          $ref: '#/components/schemas/PasswordPolicy' 
        allowGrantTypes:
          type: array
          items:
            type: string
        userLock:
          $ref: '#/components/schemas/UserLock'
    ProjectPutRequest:
      type: object
      properties:
        tokenConfig:
          $ref: '#/components/schemas/TokenConfig'
        passwordPolicy:
          $ref: '#/components/schemas/PasswordPolicy' 
        allowGrantTypes:
          type: array
          items:
            type: string
        userLock:
          $ref: '#/components/schemas/UserLock'
    TokenConfig:
      type: object
      properties:
        accessTokenLifeSpan:
          type: integer
        refreshTokenLifeSpan:
          type: integer
    PasswordPolicy:
      type: object
      properties:
        length:
          type: integer
          description: 'Minimum length of password'
        notUserName:
          type: boolean
        blackList:
          type: array
          items:
            type: string
        useCharacter:
          type: string
          enum: [lower, upper, both, either]
        useDigit:
          type: boolean
        useSpecialCharacter:
          type: boolean
    UserLock:
      type: object
      properties:
        enabled:
          type: boolean
        maxLoginFailure:
          type: integer
        lockDuration:
          type: string
          format: date
        failureResetTime:
          type: string
          format: date
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
          format: password
        system_roles:
          description: 'Array of system role IDs'
          type: array
          items:
            type: string
        custom_roles:
          description: 'Array of custom role IDs'
          type: array
          items:
            type: string
    UserGetResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date
        system_roles:
          description: 'Array of system role IDs'
          type: array
          items:
            type: string
        custom_roles:
          description: 'Array of custom roles'
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        lockState:
          $ref: '#/components/schemas/LockState'
    UserPutRequest:
      type: object
      properties:
        name:
          type: string
        system_roles:
          description: 'Array of system role IDs'
          type: array
          items:
            type: string
        custom_roles:
          description: 'Array of custom role IDs'
          type: array
          items:
            type: string
    UserChangePasswordRequest:
      type: object
      properties:
        password:
          type: string
    LockState:
      type: object
      properties:
        locked:
          type: boolean
        veriftFailedTimes:
          type: array
          items:
            type: string
            format: date
    ClientCreateRequest:
      type: object
      properties:
        id:
          type: string
        secret:
          type: string
        access_type:
          type: string
        allowed_callback_urls:
          type: array
          items:
            type: string
    ClientGetResponse:
      type: object
      properties:
        id:
          type: string
        secret:
          type: string
        access_type:
          type: string
        created_at:
          type: string
          format: date
        allowed_callback_urls:
          type: array
          items:
            type: string
    ClientPutRequest:
      type: object
      properties:
        secret:
          type: string
        access_type:
          type: string
        allowed_callback_urls:
          type: array
          items:
            type: string
    CustomRoleCreateRequest:
      type: object
      properties:
        name:
          type: string
    CustomRoleGetResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        projectName:
          type: string
        created_at:
          type: string
          format: date
    CustomRolePutRequest:
      type: object
      properties:
        name:
          type: string
    SessionGetResponse:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date
        expires_in:
          type: integer
        from_ip:
          type: string
    TokenResponse:
      type: object
      properties:
        token_type:
          type: string
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        refresh_expires_in:
          type: integer
    OpenIDConfiguration:
      type: object
      properties:
        issuer:
          type: string
        authorization_endpoint:
          type: string
        token_endpoint:
          type: string
        userinfo_endpoint:
          type: string
        jwks_uri:
          type: string
        scopes_supported:
          type: array
          items:
            type: string
        response_types_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        claims_supported:
          type: array
          items:
            type: string
    JWKSet:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
              kid:
                type: string
              alg:
                type: string
              use:
                type: string
              n:
                type: string
              e:
                type: string
              x:
                type: string
              y:
                type: string
    UserInfo:
      type: object
      properties:
        sub:
          type: string
        preferred_username:
          type: string
    LoginRequest:
      type: object
      properties:
        login_verify_code:
          type: string
        username:
          type: string
        password:
          type: string
        state:
          type: string
    TokenRequest:
      type: object
      properties:
        grant_type:
          type: string
        username:
          type: string
        password:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        scope:
          type: string
        refresh_token:
          type: string
        redirect_uri:
          type: string
        code:
          type: string
        state:
          type: string
    AuthRequest:
      type: object
      properties:
        scope:
          type: string
        response_type:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
        state:
          type: string
        nonce:
          type: string
        prompt:
          type: string
        max_age:
          type: integer
        id_token_hint:
          type: string
    ConsentRequest:
      type: object
      properties:
        select:
          type: string
        state:
          type: string
    TokenRevokeRequest:
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
        state:
          type: string
    AuditGetResponse:
      type: object
      properties:
        time:
          type: string
          format: date
        resource_type:
          type: string
        method:
          type: string
        path:
          type: string
        success:
          type: boolean
        message:
          type: string
